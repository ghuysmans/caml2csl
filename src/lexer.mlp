(* The lexer definition *)

{
(**) open Parser;;
     open Location;;

(* For nested comments *)

let comment_depth = ref 0;;

(* The table of keywords *)

let keyword_table = (Hashtbl.new 149 : (string, token) Hashtbl.t);;
let infix_list=ref ([]:string list);;


let reset_infix()=
 infix_list := [ "not"; "quo"; "mod"; "land"; "lor"; "lxor";
                 "lsl"; "lsr"; "asr" ];
 Hashtbl.clear keyword_table;
 do_list (fun (str,tok) -> Hashtbl.add keyword_table str tok) [
  "and", AND no_location;
  "as", AS;
  "begin", BEGIN;
  "do", DO;
  "done", DONE;
  "downto", DOWNTO;
  "else", ELSE;
  "end", END;
  "exception", EXCEPTION no_location;
  "for", FOR;
  "fun", FUN no_location;
  "function", FUNCTION no_location;
  "if", IF;
  "in", IN;
  "let", LET;
  "match", MATCH;
  "mutable", MUTABLE;
  "not", NOT no_location;
  "of", OF;
  "or", OR;
  "prefix", PREF no_location;
  "rec", REC no_location;
  "then", THEN;
  "to", TO;
  "try", TRY;
  "type", TYPE;
  "value", VALUE no_location;
  "when", WHEN;
  "where", WHERE no_location;
  "while", WHILE;
  "with", WITH no_location;

  "quo", INFIX3("quo",no_location);
  "mod", INFIX3("mod",no_location);
  "land", INFIX3("land",no_location);
  "lor", INFIX3("lor",no_location);
  "lxor", INFIX3("lxor",no_location);
  "lsl", INFIX4("lsl",no_location);
  "lsr", INFIX4("lsr",no_location);
  "asr", INFIX4("asr",no_location)
];;


let add_infix s =
  infix_list := s :: !infix_list;
  Hashtbl.add keyword_table s (INFIX2 (s,no_location))
;;

let remove_infix s =
  infix_list := except s !infix_list;
  Hashtbl.remove keyword_table s
;;

let lex_loc lb= Loc ((get_lexeme_start lb),(get_lexeme_end lb));;



let chg_kwd loc=function
   AND _ -> AND loc
 | EXCEPTION _ -> EXCEPTION loc
 | FUN _ -> FUN loc
 | FUNCTION _ -> FUNCTION loc
 | NOT _ -> NOT loc
 | PREF _ -> PREF loc
 | REC _ -> REC loc
 | VALUE _ -> VALUE loc
 | WHERE _ -> WHERE loc
 | WITH _ -> WITH loc
 | INFIX2 (i,_) -> INFIX2 (i,loc)
 | INFIX3 (i,_) -> INFIX3 (i,loc)
 | INFIX4 (i,_) -> INFIX4 (i,loc)
 | k -> k
;;

(* To buffer string literals *)

let initial_string_buffer = create_string 256;;
let string_buff = ref initial_string_buffer;;
let string_index = ref 0;;

let reset_string_buffer () =
  string_buff := initial_string_buffer;
  string_index := 0;
  ()
;;

let store_string_char c =
  if !string_index >= string_length (!string_buff) then begin
    let new_buff = create_string (string_length (!string_buff) * 2) in
      blit_string (!string_buff) 0 new_buff 0 (string_length (!string_buff));
      string_buff := new_buff
  end;
  set_nth_char (!string_buff) (!string_index) c;
  incr string_index
;;

let get_stored_string () =
  let s = sub_string (!string_buff) 0 (!string_index) in
    string_buff := initial_string_buffer;
    s
;;

(* To translate escape sequences *)

let char_for_backslash = function
#ifdef macintosh
    'n' -> '\013'
  | 'r' -> '\010'
#else
    'n' -> '\010'
  | 'r' -> '\013'
#endif
  | 'b' -> '\008'
  | 't' -> '\009'
  | c   -> c
;;

let char_for_decimal_code lexbuf i =
  let c = 
    100 * (int_of_char(get_lexeme_char lexbuf i) - 48) +
     10 * (int_of_char(get_lexeme_char lexbuf (i+1)) - 48) +
          (int_of_char(get_lexeme_char lexbuf (i+2)) - 48) in
  char_of_int(c land 0xFF)
;;

}

#ifdef unix
#define ACCENTED '\192'-'\214' '\216'-'\246' '\248'-'\255'
#endif
#ifdef macintosh
#define ACCENTED '\128'-'\159' '\174'-'\175' '\190'-'\191' '\203'-'\207' '\216'-'\217' '\222'-'\223' '\229'-'\239' '\241'-'\244'
#endif
#ifdef msdos
#define ACCENTED '\128'-'\154' '\160'-'\165'
#endif

#define SYMBOLS \
    '!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~'

#ifdef msdos
#define End_of_file (eof | '\026')
#else
#define End_of_file eof
#endif

rule main = parse
    [' ' '\010' '\013' '\009' '\012'] +
      { main lexbuf }
  | ['A'-'Z' 'a'-'z' ACCENTED ]
    ( '_' ? ['A'-'Z' 'a'-'z' ACCENTED ''' (*'*) '0'-'9' ] ) *
      { let s = get_lexeme lexbuf in
          try
            chg_kwd (lex_loc lexbuf) (Hashtbl.find keyword_table s)
          with Not_found ->
            IDENT (s,(lex_loc lexbuf)) }
  | ['0'-'9']+
    | '0' ['x' 'X'] ['0'-'9' 'A'-'F' 'a'-'f']+
    | '0' ['o' 'O'] ['0'-'7']+
    | '0' ['b' 'B'] ['0'-'1']+
      { INT ((int_of_string(get_lexeme lexbuf)),(lex_loc lexbuf)) }
  | ['0'-'9']+ ('.' ['0'-'9']*)? (['e' 'E'] ['+' '-']? ['0'-'9']+)?
      { FLOAT (float_of_string(get_lexeme lexbuf)) }
  | "\""
      { reset_string_buffer();
        let string_start = lexbuf.lex_start_pos + lexbuf.lex_abs_pos in
        begin try
          string lexbuf
        with Lexical_error(Unterminated_string, _, string_end) ->
          raise(Lexical_error(Unterminated_string, string_start, string_end))
        end;
        lexbuf.lex_start_pos <- string_start - lexbuf.lex_abs_pos;
        STRING (get_stored_string(),(lex_loc lexbuf)) }
  | "`"
      { let char_start = lexbuf.lex_start_pos + lexbuf.lex_abs_pos in
        let c = char lexbuf in
        lexbuf.lex_start_pos <- char_start - lexbuf.lex_abs_pos;
        CHAR (c,(lex_loc lexbuf)) }
  | "(*"
      { let comment_start = lexbuf.lex_start_pos + lexbuf.lex_abs_pos in
        comment_depth := 1;
        begin try
          comment lexbuf
        with Lexical_error(Unterminated_comment, _, comment_end) ->
          raise(Lexical_error(Unterminated_comment,
                              comment_start, comment_end))
        end;
        main lexbuf }
  | "#" { SHARP }
  | "&" { AMPERSAND }
  | "'" { QUOTE }
  | "(" { LPAREN }
  | ")" { RPAREN }
  | "*" { STAR (lex_loc lexbuf)}
  | "," { COMMA }
  | "->" { MINUSGREATER }
  | "." { DOT }
  | ".." { DOTDOT }
  | ".(" { DOTLPAREN }
  | ".[" { DOTLBRACKET }
  | ":" { COLON }
  | "::" { COLONCOLON (lex_loc lexbuf)}
  | ":=" { COLONEQUAL (lex_loc lexbuf)}
  | ";" { SEMI (lex_loc lexbuf)}
  | ";;" { SEMISEMI }
  | "<-" { LESSMINUS }
  | "=" { EQUAL (lex_loc lexbuf)}
  | "==" { EQUALEQUAL (lex_loc lexbuf)}
  | ">]" { GREATERRBRACKET }
  | "[" { LBRACKET }
  | "[|" { LBRACKETBAR }
  | "[<" { LBRACKETLESS }
  | "]" { RBRACKET }
  | "_" { UNDERSCORE (lex_loc lexbuf)}
  | "__" { UNDERUNDER (lex_loc lexbuf)}
  | "{" { LBRACE }
  | "|" { BAR }
  | "|]" { BARRBRACKET }
  | "}" { RBRACE }
  | "&&" { AMPERAMPER }
  | "||" { BARBAR }

  | "!="    { INFIX1 ("!=",(lex_loc lexbuf)) }
  | "-"     { SUBTRACTIVE ("-",(lex_loc lexbuf)) }
  | "-."    { SUBTRACTIVE ("-.",(lex_loc lexbuf)) }

  | [ '!' '?' ] [ SYMBOLS ] *
            { PREFIX(get_lexeme lexbuf,(lex_loc lexbuf)) }
  | [ '=' '<' '>' '@' '^' '|' '&' '~' '$' ] [ SYMBOLS ] *
            { INFIX1(get_lexeme lexbuf,(lex_loc lexbuf)) }
  | [ '+' '-' ] [ SYMBOLS ] *
            { INFIX2(get_lexeme lexbuf,(lex_loc lexbuf)) }
  | "**" [ SYMBOLS ] *
            { INFIX4(get_lexeme lexbuf,(lex_loc lexbuf)) }
  | [ '*' '/' '%' ] [ SYMBOLS ] *
            { INFIX3(get_lexeme lexbuf,(lex_loc lexbuf)) }
  | End_of_file { EOF }
  | _
      { raise (Lexical_error(Illegal_character,
                            get_lexeme_start lexbuf, get_lexeme_end lexbuf)) }

and comment = parse
    "(*"
      { comment_depth := succ !comment_depth; comment lexbuf }
  | "*)"
      { comment_depth := pred !comment_depth;
        if !comment_depth > 0 then comment lexbuf }
  | "\""
      { reset_string_buffer();
        let string_start = lexbuf.lex_start_pos + lexbuf.lex_abs_pos in
        begin try
          string lexbuf
        with Lexical_error(Unterminated_string, _, string_end) ->
          raise(Lexical_error(Unterminated_string, string_start, string_end))
        end;
        comment lexbuf }
  | "``"
      { comment lexbuf }
  | "`" [^ '\\' '\''] "`"
      { comment lexbuf }
  | "`" '\\' ['\\' '\'' 'n' 't' 'b' 'r'] "`"
      { comment lexbuf }
  | "`" '\\' ['0'-'9'] ['0'-'9'] ['0'-'9'] "`"
      { comment lexbuf }
  | End_of_file
      { raise(Lexical_error
                (Unterminated_comment, 0, get_lexeme_start lexbuf)) }
  | _
      { comment lexbuf }

and char = parse
    [^ '\\' '\''] "`"
      { get_lexeme_char lexbuf 0 }
  | '\\' ['\\' '\'' 'n' 't' 'b' 'r'] "`"
      { char_for_backslash (get_lexeme_char lexbuf 1) }
  | '\\' ['0'-'9'] ['0'-'9'] ['0'-'9'] "`"
      { char_for_decimal_code lexbuf 1 }
  | [^ '\''] * ("`" | End_of_file)
      { raise (Lexical_error(Bad_char_constant,
                            get_lexeme_start lexbuf - 1,
                            get_lexeme_end lexbuf)) }

and string = parse
    '"` (*"'"'*)
      { () }
  | `\\` ("\010" | "\013" | "\013\010") [` ` `\009`] *
      { string lexbuf }
  | `\\` [`\\` `"' (*"'"'*) 'n' 't' 'b' 'r']
      { store_string_char(char_for_backslash(get_lexeme_char lexbuf 1));
        string lexbuf }
  | '\\' ['0'-'9'] ['0'-'9'] ['0'-'9']
      { store_string_char(char_for_decimal_code lexbuf 1);
         string lexbuf }
  | End_of_file
      { raise (Lexical_error
                (Unterminated_string, 0, get_lexeme_start lexbuf)) }
  | _
      { store_string_char(get_lexeme_char lexbuf 0);
        string lexbuf }
;;
